// Generated from ./src/parser/ScalaSlang.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ScalaSlangLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly INT = 17;
	public static readonly BOOL = 18;
	public static readonly ID = 19;
	public static readonly BINOP = 20;
	public static readonly UNARY = 21;
	public static readonly BINLOGOP = 22;
	public static readonly WS = 23;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "INT", "BOOL", 
		"ID", "BINOP", "UNARY", "BINLOGOP", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'val'", "':'", "'='", "';'", "'def'", "'('", "')'", "'return'", 
		"'{'", "'}'", "'if'", "'else'", "'->'", "','", "'=>'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "INT", "BOOL", "ID", "BINOP", "UNARY", 
		"BINLOGOP", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ScalaSlangLexer._LITERAL_NAMES, ScalaSlangLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ScalaSlangLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ScalaSlangLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ScalaSlang.g4"; }

	// @Override
	public get ruleNames(): string[] { return ScalaSlangLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ScalaSlangLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ScalaSlangLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ScalaSlangLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x19\x90\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n" +
		"\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x12\x06\x12b\n\x12\r\x12\x0E\x12c\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13o\n\x13\x03\x14\x06\x14r\n" +
		"\x14\r\x14\x0E\x14s\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x05\x15\x80\n\x15\x03\x16\x03\x16\x03\x17" +
		"\x03\x17\x03\x17\x03\x17\x05\x17\x88\n\x17\x03\x18\x06\x18\x8B\n\x18\r" +
		"\x18\x0E\x18\x8C\x03\x18\x03\x18\x02\x02\x02\x19\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
		"\x03\x02\x07\x03\x022;\x04\x02C\\c|\x05\x02,-//11\x04\x02>>@@\x05\x02" +
		"\v\f\x0F\x0F\"\"\x02\x99\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02" +
		"\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02" +
		"\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02" +
		"\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02" +
		"\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03" +
		"\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02" +
		"\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x031\x03\x02\x02\x02\x05" +
		"5\x03\x02\x02\x02\x077\x03\x02\x02\x02\t9\x03\x02\x02\x02\v;\x03\x02\x02" +
		"\x02\r?\x03\x02\x02\x02\x0FA\x03\x02\x02\x02\x11C\x03\x02\x02\x02\x13" +
		"J\x03\x02\x02\x02\x15L\x03\x02\x02\x02\x17N\x03\x02\x02\x02\x19Q\x03\x02" +
		"\x02\x02\x1BV\x03\x02\x02\x02\x1DY\x03\x02\x02\x02\x1F[\x03\x02\x02\x02" +
		"!^\x03\x02\x02\x02#a\x03\x02\x02\x02%n\x03\x02\x02\x02\'q\x03\x02\x02" +
		"\x02)\x7F\x03\x02\x02\x02+\x81\x03\x02\x02\x02-\x87\x03\x02\x02\x02/\x8A" +
		"\x03\x02\x02\x0212\x07x\x02\x0223\x07c\x02\x0234\x07n\x02\x024\x04\x03" +
		"\x02\x02\x0256\x07<\x02\x026\x06\x03\x02\x02\x0278\x07?\x02\x028\b\x03" +
		"\x02\x02\x029:\x07=\x02\x02:\n\x03\x02\x02\x02;<\x07f\x02\x02<=\x07g\x02" +
		"\x02=>\x07h\x02\x02>\f\x03\x02\x02\x02?@\x07*\x02\x02@\x0E\x03\x02\x02" +
		"\x02AB\x07+\x02\x02B\x10\x03\x02\x02\x02CD\x07t\x02\x02DE\x07g\x02\x02" +
		"EF\x07v\x02\x02FG\x07w\x02\x02GH\x07t\x02\x02HI\x07p\x02\x02I\x12\x03" +
		"\x02\x02\x02JK\x07}\x02\x02K\x14\x03\x02\x02\x02LM\x07\x7F\x02\x02M\x16" +
		"\x03\x02\x02\x02NO\x07k\x02\x02OP\x07h\x02\x02P\x18\x03\x02\x02\x02QR" +
		"\x07g\x02\x02RS\x07n\x02\x02ST\x07u\x02\x02TU\x07g\x02\x02U\x1A\x03\x02" +
		"\x02\x02VW\x07/\x02\x02WX\x07@\x02\x02X\x1C\x03\x02\x02\x02YZ\x07.\x02" +
		"\x02Z\x1E\x03\x02\x02\x02[\\\x07?\x02\x02\\]\x07@\x02\x02] \x03\x02\x02" +
		"\x02^_\x07A\x02\x02_\"\x03\x02\x02\x02`b\t\x02\x02\x02a`\x03\x02\x02\x02" +
		"bc\x03\x02\x02\x02ca\x03\x02\x02\x02cd\x03\x02\x02\x02d$\x03\x02\x02\x02" +
		"ef\x07v\x02\x02fg\x07t\x02\x02gh\x07w\x02\x02ho\x07g\x02\x02ij\x07h\x02" +
		"\x02jk\x07c\x02\x02kl\x07n\x02\x02lm\x07u\x02\x02mo\x07g\x02\x02ne\x03" +
		"\x02\x02\x02ni\x03\x02\x02\x02o&\x03\x02\x02\x02pr\t\x03\x02\x02qp\x03" +
		"\x02\x02\x02rs\x03\x02\x02\x02sq\x03\x02\x02\x02st\x03\x02\x02\x02t(\x03" +
		"\x02\x02\x02u\x80\t\x04\x02\x02vw\x07?\x02\x02w\x80\x07?\x02\x02xy\x07" +
		"#\x02\x02y\x80\x07?\x02\x02z\x80\t\x05\x02\x02{|\x07>\x02\x02|\x80\x07" +
		"?\x02\x02}~\x07@\x02\x02~\x80\x07?\x02\x02\x7Fu\x03\x02\x02\x02\x7Fv\x03" +
		"\x02\x02\x02\x7Fx\x03\x02\x02\x02\x7Fz\x03\x02\x02\x02\x7F{\x03\x02\x02" +
		"\x02\x7F}\x03\x02\x02\x02\x80*\x03\x02\x02\x02\x81\x82\x07#\x02\x02\x82" +
		",\x03\x02\x02\x02\x83\x84\x07(\x02\x02\x84\x88\x07(\x02\x02\x85\x86\x07" +
		"~\x02\x02\x86\x88\x07~\x02\x02\x87\x83\x03\x02\x02\x02\x87\x85\x03\x02" +
		"\x02\x02\x88.\x03\x02\x02\x02\x89\x8B\t\x06\x02\x02\x8A\x89\x03\x02\x02" +
		"\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02" +
		"\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8F\b\x18\x02\x02\x8F0\x03\x02\x02\x02" +
		"\t\x02cns\x7F\x87\x8C\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ScalaSlangLexer.__ATN) {
			ScalaSlangLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ScalaSlangLexer._serializedATN));
		}

		return ScalaSlangLexer.__ATN;
	}

}

